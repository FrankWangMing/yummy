datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  // previewFeatures = []
}

generator dbml {
  provider = "prisma-dbml-generator"
}

enum Role {
  UNDEFINED
  WHOLESALER
  MERCHANT
  DRIVER
}

model WXUser {
  openId  String @id
  UnionId String
  id      String @default(cuid())
  role    Role   @default(UNDEFINED)
}

model Admin {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  phone     String   @unique
  username  String
  password  String
  userImg   String?
}

model WholesalerUser {
  id        String     @id @unique @default(cuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  password  String
  username  String
  phone     String     @unique
  order     Order[]
  goodsCart GoodsCart?
  userImg   String?
}

model MerchantUser {
  id              String           @id @unique @default(cuid())
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  password        String
  username        String
  phone           String           @unique
  money           Int              @default(0)
  shop            Shop?
  Goods           Goods[]
  userImg         String?
  shopApplication ShopApplication?
}

model DriverUser {
  id        String    @id @unique @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  password  String
  username  String
  phone     String    @unique
  state     UserState @default(UNAVAILABLE) @map("driver_state")
  userImg   String?
}

model Goods {
  id              String         @id @unique @default(cuid())
  name            String
  goodsCategoryId String
  createdAt       DateTime       @default(now())
  shop            Shop           @relation(fields: [shopId], references: [id])
  shopId          String
  goodsCategory   GoodsCategory  @relation(fields: [goodsCategoryId], references: [id])
  stock           Int // 库存
  price           Int
  goodsOnOrder    GoodsOnOrder[]
  merchantUser    MerchantUser   @relation(fields: [merchantUserId], references: [id])
  merchantUserId  String
  goodsImg        String[]       @default([])
  mainGoodsImg    String
}

model GoodsCategory {
  id               String             @id @unique @default(cuid())
  name             String
  goods            Goods[]
  createdAt        DateTime           @default(now())
  categoriesOnShop CategoriesOnShop[]
}

model CategoriesOnShop {
  goodsCategory   GoodsCategory @relation(fields: [goodsCategoryId], references: [id])
  goodsCategoryId String // relation scalar field (used in the `@relation` attribute above)
  shop            Shop          @relation(fields: [shopId], references: [id])
  shopId          String // relation scalar field (used in the `@relation` attribute above)
  assignedAt      DateTime      @default(now())
  assignedBy      String

  @@id([shopId, goodsCategoryId])
}

model Shop {
  id                 String              @id @unique @default(cuid())
  name               String
  merchantUser       MerchantUser        @relation(fields: [merchantUserId], references: [id])
  merchantUserId     String              @unique
  goods              Goods[]
  moveInTime         DateTime?
  moveOutTime        DateTime?
  recommend          Boolean             @default(false)
  shopLevel          ShopLevel?          @relation(fields: [shopLevelId], references: [id])
  shopState          ShopState           @default(applying)
  shopImg            String? // 店铺头像
  shopAddress        String
  billingInformation BillingInformation?
  shopLevelId        String?             @unique
  ShopApplication    ShopApplication     @relation(fields: [shopApplicationId], references: [id])
  shopApplicationId  String              @unique
  categoriesOnShop   CategoriesOnShop[]
}

enum ShopState {
  onLine
  offline
  applying
  turnDown
}

model ShopApplication {
  id             String       @id @unique @default(cuid())
  lengthOfStay   Int // 入驻时长 year
  appliyState    ShopState    @default(applying)
  createdAt      DateTime     @default(now())
  moneyOfStay    Int
  description    String?
  company        Company?     @relation(fields: [companyId], references: [id])
  companyId      String?      @unique
  MerchantUser   MerchantUser @relation(fields: [merchantUserId], references: [id])
  merchantUserId String       @unique
  shop           Shop?
}

model Company {
  id              String           @id @unique @default(cuid())
  companyName     String // 公司名称
  companyAddress  String // 公司地址
  companyCode     String // 统一社会信用码
  companyCard     String // 营业执照电子版
  companyOwner    String // 公司法人
  ownerPhone      String // 法人手机
  ownerID         String // 法人身份证
  ownerIDfrontend String // 法人身份证正面
  ownerIDback     String // 法人身份证反面
  ShopApplication ShopApplication?
}

model BillingInformation {
  id     String @id @unique @default(cuid())
  shop   Shop   @relation(fields: [shopId], references: [id])
  shopId String @unique
}

model ShopLevel {
  id              String  @id @unique @default(cuid())
  Shop            Shop[]
  name            String
  money           Int // 年费
  description     String?
  commissionRatio Float // 平台抽成比例
  handling        Float // 手续费
  remark          String? // 备注
}

enum UserState {
  AVAILABLE
  UNAVAILABLE
}

enum OrderState {
  PendingPay // 待支付
  Processing // 处理中
  Completed // 已完成
  Cancel // 已完成
}

// Pending Payment: 待支付
// Processing: 处理中
// Shipped: 已发货
// In transit: 运输中
// Delivered: 已送达
// Completed: 已完成
// Cancelled: 已取消
// Exception: 异常
// Refunding: 退款中
// Refunded: 已退款

enum OrderPayState {
  Pending
  Processing
  Paid
  Cancelled
}

model GoodsOnOrder {
  goods      Goods    @relation(fields: [goodsId], references: [id])
  goodsId    String // relation scalar field (used in the `@relation` attribute above)
  order      Order    @relation(fields: [orderId], references: [id])
  orderId    String // relation scalar field (used in the `@relation` attribute above)
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([goodsId, orderId])
}

// 订单
model Order {
  id               String         @id @unique @default(cuid()) @map("order_id")
  wholesalerUser   WholesalerUser @relation(fields: [wholesalerUserId], references: [id])
  goodsOnOrder     GoodsOnOrder[]
  createdAt        DateTime       @default(now())
  orderState       OrderState
  payState         OrderPayState  @default(Pending)
  payMoney         Int
  payTime          DateTime?
  wholesalerUserId String
  goodsId          String
}

model GoodsCart {
  id               String         @id @unique @default(cuid())
  goodsId          String[]
  wholesalerUser   WholesalerUser @relation(fields: [wholesalerUserId], references: [id])
  wholesalerUserId String         @unique
}
